"""
–•—Ä–∞–Ω–∏–ª–∏—â–µ —É—Ä–æ–∫–æ–≤ (–ø–æ–∫–∞ –≤ –∫–æ–¥–µ).
–°–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç ‚Äî –≤—ã–Ω–µ—Å—Ç–∏ –≤ JSON/–ë–î.
"""

# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å.
LESSONS = {
    "A1": [
        "–£—Ä–æ–∫ A1 #1\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:\nHallo ‚Äî –ü—Ä–∏–≤–µ—Ç\nGuten Morgen ‚Äî –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\nIch hei√üe ... ‚Äî –ú–µ–Ω—è –∑–æ–≤—É—Ç ...\n\n–§—Ä–∞–∑–∞ –¥–Ω—è: Wie geht es dir? ‚Äî –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
        "–£—Ä–æ–∫ A1 #2\n–ß–∏—Å–ª–∞ 1‚Äì5:\nEins, Zwei, Drei, Vier, F√ºnf.\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Ich bin ... / Ich komme aus ...",
        "–£—Ä–æ–∫ A1 #3\n–ë–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã:\nsein (–±—ã—Ç—å), haben (–∏–º–µ—Ç—å), machen (–¥–µ–ª–∞—Ç—å).\n–ü—Ä–∏–º–µ—Ä: Ich habe einen Bruder ‚Äî –£ –º–µ–Ω—è –µ—Å—Ç—å –±—Ä–∞—Ç."
    ],
    "A2": [
        "–£—Ä–æ–∫ A2 #1\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ A1 + —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: arbeiten (—Ä–∞–±–æ—Ç–∞—Ç—å), lernen (—É—á–∏—Ç—å—Å—è).",
        "–£—Ä–æ–∫ A2 #2\n–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è Perfekt (–≤–≤–æ–¥): Ich habe gespielt.",
        "–£—Ä–æ–∫ A2 #3\n–ú–æ–¥–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã (d√ºrfen, wollen) ‚Äî –±–∞–∑–æ–≤–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ."
    ]
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞).
TOTAL_LESSONS = {lvl: len(lst) for lvl, lst in LESSONS.items()}


def total_for_level(level: str) -> int:
    return TOTAL_LESSONS.get(level, 0)


def get_lesson_text(level: str, index: int) -> str:
    lessons = LESSONS.get(level, [])
    if 0 <= index < len(lessons):
        return lessons[index]
    return ""


def is_last_lesson(level: str, index: int) -> bool:
    lessons = LESSONS.get(level, [])
    return index >= len(lessons)


def build_end_message(level: str) -> str:
    return (f"üî• –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ —É—Ä–æ–≤–Ω—è {level}!\n"
            f"–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å.")


def get_repeat_all(level: str, up_to_index: int) -> str:
    """
    –í–µ—Ä–Ω—ë—Ç –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (0..up_to_index-1).
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    lessons = LESSONS.get(level, [])
    if up_to_index <= 0:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü—Ä–æ–π–¥–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–æ–≤—ã–π."
    slice_part = lessons[:up_to_index]
    if not slice_part:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
    return "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:\n\n" + "\n\n---\n\n".join(slice_part)


def get_current_lesson_or_end(level: str, index: int) -> str:
    lessons = LESSONS.get(level, [])
    if index >= len(lessons):
        # –≤–µ—Ä–Ω—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ + —Å–æ–æ–±—â–µ–Ω–∏–µ
        if lessons:
            last = lessons[-1]
            return last + "\n\n" + build_end_message(level)
        return build_end_message(level)
    return lessons[index]
