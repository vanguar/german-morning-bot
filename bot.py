import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN, MAX_MANUAL_PER_DAY, DEFAULT_LEVEL
from logging_conf import setup_logging

# Scheduler imports
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from daily_send import broadcast

from models import (
    init_db,
    register_user,
    get_user,
    set_level,
    increment_lesson,
    set_last_request,
    increment_manual,
    can_take_manual,
    reset_manual_if_new_day,
    set_last_sent,
    get_progress_text,
    reactivate_if_blocked,
    reset_progress_to_first,
)
from lesson_manager import LessonManager
from utils import utc_date_str

# Initialize logging
setup_logging()
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

lesson_mgr = LessonManager()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")],
        [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")],
    ],
    resize_keyboard=True,
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
level_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üöÄ –£—Ä–æ–≤–µ–Ω—å A1", callback_data="set_level:A1"),
        InlineKeyboardButton(text="üöÄüöÄ –£—Ä–æ–≤–µ–Ω—å A2", callback_data="set_level:A2")
    ]
])

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def build_start_text() -> str:
    return (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è üá©üá™ –Ω–µ–º–µ—Ü–∫–æ–≥–æ.</b>\n\n"
        "–Ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º –∏–ª–∏ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è üëá"
    )

# -------- Handlers --------

async def cmd_start(message: Message):
    user_id = message.from_user.id
    register_user(user_id, utc_date_str())
    reactivate_if_blocked(user_id)
    await message.answer(build_start_text(), reply_markup=level_kb)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

    row = get_user(user_id)
    level = row[1]
    first_text = lesson_mgr.current_or_end(level, 0)
    await message.answer(f"<b>üåÖ –í–∞—à –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫</b>\n\n{first_text}")
    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)
    await message.answer(
        "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫."
    )

async def set_level_callback_handler(callback: CallbackQuery):
    new_level = callback.data.split(":")[1]
    user_id = callback.from_user.id

    row = get_user(user_id)
    if not row:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ /start", show_alert=True)
        return

    current_level = row[1]
    if current_level == new_level and row[2] > 0:
        await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å {new_level} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

    set_level(user_id, new_level)
    await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å {new_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
    await callback.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{new_level}</b>.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é."
    )

async def cmd_progress(message: Message):
    row = get_user(message.from_user.id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    _, level, lesson_index, *_ = row
    total = lesson_mgr.total(level)
    await message.answer(get_progress_text(message.from_user.id, total))

async def repeat_all_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    _, level, lesson_index, *_ = row
    parts = lesson_mgr.repeat_all(level, lesson_index)

    if isinstance(parts, str):
        parts = [parts]

    for part in parts:
        await message.answer(part)

async def next_lesson_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    (
        _uid, level, lesson_index, _manual_today, _start_date,
        _last_sent, _last_req, status, _reactivated_at,
    ) = row

    if status != "active":
        await message.answer("–°—Ç–∞—Ç—É—Å –Ω–µ active. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    reset_manual_if_new_day(user_id)
    total = lesson_mgr.total(level)
    if lesson_index >= total:
        await message.answer(lesson_mgr.end_message(level))
        return

    if not can_take_manual(user_id, MAX_MANUAL_PER_DAY):
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä—É—á–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    text = lesson_mgr.current_or_end(level, lesson_index)
    if not text:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ (–ø—Ä–æ–≤–µ—Ä—å lessons.json).")
        return

    await message.answer(text)

    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)

async def restart_from_first_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        register_user(user_id, utc_date_str())

    reset_progress_to_first(user_id)
    row2 = get_user(user_id)
    level = row2[1] if row2 else DEFAULT_LEVEL

    total = lesson_mgr.total(level)
    if total == 0:
        await message.answer("–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ.")
        return

    first_text = lesson_mgr.current_or_end(level, 0)
    await message.answer("<b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω.</b> –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!\n\n" + first_text)

    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)

async def fallback(message: Message):
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª. –ö–Ω–æ–ø–∫–∏:\nüìò —É—Ä–æ–∫ ‚Ä¢ üîÅ –ø–æ–≤—Ç–æ—Ä ‚Ä¢ üìà –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Ä¢ üèÅ —Å–Ω–∞—á–∞–ª–∞\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ /start."
    )

# -------- Main --------

async def main():
    init_db()
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(set_level_callback_handler, F.data.startswith("set_level:"))
    
    dp.message.register(cmd_progress, Command("progress"))
    dp.message.register(next_lesson_handler, F.text == "üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
    dp.message.register(repeat_all_handler, F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ")
    dp.message.register(cmd_progress, F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    dp.message.register(restart_from_first_handler, F.text == "üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")
    dp.message.register(fallback)

    bot = Bot(
        BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )

    # –≤–º–µ—Å—Ç–æ CronTrigger –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º IntervalTrigger
    scheduler = AsyncIOScheduler(timezone="Europe/Berlin")
    scheduler.add_job(
        broadcast,
        CronTrigger(hour=8, minute=0)
    )

    scheduler.start()
    logger.info("Scheduler started for daily lessons at¬†08:00¬†Europe/Berlin")

    logger.info("Bot started (polling)...")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
