import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN, MAX_MANUAL_PER_DAY, DEFAULT_LEVEL
from logging_conf import setup_logging
from models import (
    init_db,
    register_user,
    get_user,
    set_level,
    increment_lesson,
    set_last_request,
    increment_manual,
    can_take_manual,
    reset_manual_if_new_day,
    set_last_sent,
    get_progress_text,
    reactivate_if_blocked,
    reset_progress_to_first,
)
from lesson_manager import LessonManager
from utils import utc_date_str

setup_logging()
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

lesson_mgr = LessonManager()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º (aiogram 3)
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")],
        [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ")],
        [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")],
    ],
    resize_keyboard=True,
)


def build_start_text() -> str:
    return (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏‚Äë–±–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–µ–º–µ—Ü–∫–æ–≥–æ.</b>\n\n"
        f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {DEFAULT_LEVEL} (–Ω–∞–ø–∏—à–∏ <code>A1</code> –∏–ª–∏ <code>A2</code> —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å).\n"
        f"üïí <b>–ê–≤—Ç–æ‚Äë—É—Ä–æ–∫ —É—Ç—Ä–æ–º:</b> 1 —à—Ç.\n"
        f"‚ö° <b>–†—É—á–Ω—ã–µ —É—Ä–æ–∫–∏:</b> –¥–æ {MAX_MANUAL_PER_DAY} –≤ –¥–µ–Ω—å (–∞–Ω—Ç–∏—Ñ–ª—É–¥ –æ—Ç–∫–ª—é—á—ë–Ω).\n\n"
        "üîò <b>–ö–Ω–æ–ø–∫–∏:</b>\n"
        "üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Äî –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
        "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ ‚Äî –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ\n"
        "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ %\n"
        "üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ ‚Äî –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å\n\n"
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞: /progress\n"
        "–£–¥–∞—á–∏! üöÄ"
    )


# -------- Handlers --------

async def cmd_start(message: Message):
    user_id = message.from_user.id
    register_user(user_id, utc_date_str())
    reactivate_if_blocked(user_id)
    await message.answer(build_start_text(), reply_markup=kb)


async def cmd_progress(message: Message):
    row = get_user(message.from_user.id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    _, level, lesson_index, *_ = row
    total = lesson_mgr.total(level)
    await message.answer(get_progress_text(message.from_user.id, total))


async def set_level_handler(message: Message):
    new_level = message.text.upper()
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    current_level = row[1]
    if current_level == new_level and row[2] > 0:
        await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —É–∂–µ {new_level}.")
        return
    set_level(user_id, new_level)
    await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_level}. –ñ–º–∏ ¬´üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫¬ª.")  # HTML –Ω–µ –Ω—É–∂–µ–Ω


async def repeat_all_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    _, level, lesson_index, *_ = row
    parts = lesson_mgr.repeat_all(level, lesson_index)

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏),
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É
    if isinstance(parts, str):
        parts = [parts]

    for part in parts:
        await message.answer(part)



async def next_lesson_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    (
        _uid,
        level,
        lesson_index,
        _manual_today,
        _start_date,
        _last_sent,
        _last_req,
        status,
        _reactivated_at,
    ) = row

    if status != "active":
        await message.answer("–°—Ç–∞—Ç—É—Å –Ω–µ active. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
    reset_manual_if_new_day(user_id)

    total = lesson_mgr.total(level)
    if lesson_index >= total:
        await message.answer(lesson_mgr.end_message(level))
        return

    # –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å ‚Äî –≤—ã—Ä–µ–∑–∞–π —ç—Ç–æ—Ç –±–ª–æ–∫ + increment_manual)
    if not can_take_manual(user_id, MAX_MANUAL_PER_DAY):
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä—É—á–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    text = lesson_mgr.current_or_end(level, lesson_index)
    if not text:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ (–ø—Ä–æ–≤–µ—Ä—å lessons.json).")
        return

    await message.answer(text)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)


async def restart_from_first_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        register_user(user_id, utc_date_str())

    reset_progress_to_first(user_id)
    row2 = get_user(user_id)
    level = row2[1] if row2 else DEFAULT_LEVEL

    total = lesson_mgr.total(level)
    if total == 0:
        await message.answer("–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ.")
        return

    first_text = lesson_mgr.current_or_end(level, 0)
    await message.answer("<b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω.</b> –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!\n\n" + first_text)

    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)


async def fallback(message: Message):
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª. –ö–Ω–æ–ø–∫–∏:\nüìò —É—Ä–æ–∫ ‚Ä¢ üîÅ –ø–æ–≤—Ç–æ—Ä ‚Ä¢ üìà –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Ä¢ üèÅ —Å–Ω–∞—á–∞–ª–∞\n–ò–ª–∏ /progress."
    )


# -------- Main --------

async def main():
    init_db()
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_progress, Command("progress"))
    dp.message.register(set_level_handler, F.text.in_({"A1", "A2", "a1", "a2"}))
    dp.message.register(next_lesson_handler, F.text == "üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
    dp.message.register(repeat_all_handler, F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ")
    dp.message.register(cmd_progress, F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    dp.message.register(restart_from_first_handler, F.text == "üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")
    dp.message.register(fallback)

    bot = Bot(
        BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    logger.info("Bot started (polling)...")
    await dp.start_polling(bot, allowed_updates=["message"])


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
