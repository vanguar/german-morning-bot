import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN, MAX_MANUAL_PER_DAY, DEFAULT_LEVEL, DB_PATH
from logging_conf import setup_logging

# Scheduler imports
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from daily_send import broadcast

from models import (
    init_db,
    register_user,
    get_user,
    set_level,
    increment_lesson,
    set_last_request,
    increment_manual,
    can_take_manual,
    reset_manual_if_new_day,
    set_last_sent,
    get_progress_text,
    reactivate_if_blocked,
    reset_progress_to_first,
)
from lesson_manager import LessonManager
from utils import utc_date_str

# Initialize logging
setup_logging()
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

lesson_mgr = LessonManager()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")],
        [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")],
    ],
    resize_keyboard=True,
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
level_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üöÄ –£—Ä–æ–≤–µ–Ω—å A1", callback_data="set_level:A1"),
        InlineKeyboardButton(text="üöÄüöÄ –£—Ä–æ–≤–µ–Ω—å A2", callback_data="set_level:A2")
    ]
])

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
admin_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
        InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")
    ],
    [
        InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
        InlineKeyboardButton(text="üìã –ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", callback_data="stats_all")
    ],
    [
        InlineKeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å –±–∞–∑—É SQLite", callback_data="download_db"),
        InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT", callback_data="export_txt")
    ],
    [
        InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")
    ]
])

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def build_start_text() -> str:
    return (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è üá©üá™ –Ω–µ–º–µ—Ü–∫–æ–≥–æ.</b>\n\n"
        "–Ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º –∏–ª–∏ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è üëá"
    )

# -------- Handlers --------

async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    register_user(user_id, utc_date_str(), username, full_name)
    reactivate_if_blocked(user_id)
    await message.answer(build_start_text(), reply_markup=level_kb)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

    row = get_user(user_id)
    level = row[1]
    first_text = lesson_mgr.current_or_end(level, 0)
    await message.answer(f"<b>üåÖ –í–∞—à –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫</b>\n\n{first_text}")
    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)
    await message.answer(
        "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫."
    )

async def set_level_callback_handler(callback: CallbackQuery):
    new_level = callback.data.split(":")[1]
    user_id = callback.from_user.id

    row = get_user(user_id)
    if not row:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ /start", show_alert=True)
        return

    current_level = row[1]
    if current_level == new_level and row[2] > 0:
        await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å {new_level} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

    set_level(user_id, new_level)
    await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å {new_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
    await callback.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{new_level}</b>.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é."
    )

async def cmd_progress(message: Message):
    row = get_user(message.from_user.id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    _, level, lesson_index, *_ = row
    total = lesson_mgr.total(level)
    await message.answer(get_progress_text(message.from_user.id, total))

async def repeat_all_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    _, level, lesson_index, *_ = row
    parts = lesson_mgr.repeat_all(level, lesson_index)

    if isinstance(parts, str):
        parts = [parts]

    for part in parts:
        await message.answer(part)

async def next_lesson_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return

    (
        _uid, level, lesson_index, _manual_today, _start_date,
        _last_sent, _last_req, status, _reactivated_at,
    ) = row

    if status != "active":
        await message.answer("–°—Ç–∞—Ç—É—Å –Ω–µ active. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    reset_manual_if_new_day(user_id)
    total = lesson_mgr.total(level)
    if lesson_index >= total:
        await message.answer(lesson_mgr.end_message(level))
        return

    if not can_take_manual(user_id, MAX_MANUAL_PER_DAY):
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä—É—á–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    text = lesson_mgr.current_or_end(level, lesson_index)
    if not text:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ (–ø—Ä–æ–≤–µ—Ä—å lessons.json).")
        return

    await message.answer(text)

    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)

async def restart_from_first_handler(message: Message):
    user_id = message.from_user.id
    row = get_user(user_id)
    if not row:
        username = message.from_user.username
        full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        register_user(user_id, utc_date_str(), username, full_name)

    reset_progress_to_first(user_id)
    row2 = get_user(user_id)
    level = row2[1] if row2 else DEFAULT_LEVEL

    total = lesson_mgr.total(level)
    if total == 0:
        await message.answer("–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ.")
        return

    first_text = lesson_mgr.current_or_end(level, 0)
    await message.answer("<b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω.</b> –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!\n\n" + first_text)

    set_last_request(user_id)
    increment_lesson(user_id)
    increment_manual(user_id)
    set_last_sent(user_id)

async def fallback(message: Message):
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª. –ö–Ω–æ–ø–∫–∏:\nüìò —É—Ä–æ–∫ ‚Ä¢ üîÅ –ø–æ–≤—Ç–æ—Ä ‚Ä¢ üìà –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Ä¢ üèÅ —Å–Ω–∞—á–∞–ª–∞\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ /start."
    )

async def cmd_backup_db(message: Message):
    try:
        from aiogram.types import FSInputFile
        
        # –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –±–∞–∑—ã
        db_file = FSInputFile(DB_PATH, filename="users_backup.db")
        await message.answer_document(
            db_file,
            caption=f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüìÖ {utc_date_str()}\nüíæ –†–∞–∑–º–µ—Ä: {os.path.getsize(DB_PATH)} –±–∞–π—Ç"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# -------- –ù–û–í–´–ï –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò --------

async def cmd_admin(message: Message):
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb
    )

async def admin_callback_handler(callback: CallbackQuery):
    action = callback.data
    
    if action == "stats_today":
        await show_stats(callback, "today")
    elif action == "stats_week":
        await show_stats(callback, "week")
    elif action == "stats_month":
        await show_stats(callback, "month")
    elif action == "stats_all":
        await show_stats(callback, "all")
    elif action == "download_db":
        await download_database(callback)
    elif action == "export_txt":
        await export_users_txt(callback)
    elif action == "export_csv":
        await export_users_csv(callback)

async def show_stats(callback: CallbackQuery, period: str):
    try:
        from models import get_conn
        import time
        from datetime import datetime, timedelta
        
        now = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if period == "today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        elif period == "week":
            start_date = now - timedelta(days=7)
            title = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date = now - timedelta(days=30)
            title = "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"
        else:  # all
            start_date = datetime(2020, 1, 1)  # –û—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞
            title = "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
        
        start_timestamp = int(start_date.timestamp())
        
        with get_conn() as conn:
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE last_request_at >= ? OR start_date >= ?
            """, (start_timestamp, start_date.strftime('%Y-%m-%d')))
            new_users = cursor.fetchone()[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE last_request_at >= ? AND status = 'active'
            """, (start_timestamp,))
            active_users = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
            cursor.execute("""
                SELECT level, COUNT(*) FROM users 
                WHERE (last_request_at >= ? OR start_date >= ?) AND status = 'active'
                GROUP BY level
            """, (start_timestamp, start_date.strftime('%Y-%m-%d')))
            level_stats = cursor.fetchall()
            
            # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            cursor.execute("""
                SELECT AVG(lesson_index) FROM users 
                WHERE (last_request_at >= ? OR start_date >= ?) AND status = 'active'
            """, (start_timestamp, start_date.strftime('%Y-%m-%d')))
            avg_progress = cursor.fetchone()[0] or 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_text = [
            f"<b>{title}</b>",
            "",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>",
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{new_users}</b>",
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{active_users}</b>",
            f"üìö –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: <b>{avg_progress:.1f}</b> —É—Ä–æ–∫–∞",
            "",
            "<b>üìä –ü–æ —É—Ä–æ–≤–Ω—è–º:</b>"
        ]
        
        for level, count in level_stats:
            stats_text.append(f"  ‚Ä¢ {level}: <b>{count}</b> —á–µ–ª.")
        
        await callback.message.edit_text(
            "\n".join(stats_text),
            reply_markup=admin_kb
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def download_database(callback: CallbackQuery):
    try:
        from aiogram.types import FSInputFile
        
        db_file = FSInputFile(DB_PATH, filename="users_backup.db")
        await callback.message.answer_document(
            db_file,
            caption=f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite\nüìÖ {utc_date_str()}"
        )
        await callback.answer("‚úÖ –ë–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def export_users_txt(callback: CallbackQuery):
    try:
        from models import get_conn
        from aiogram.types import BufferedInputFile
        
        with get_conn() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, username, full_name, level, lesson_index, start_date, status 
                FROM users ORDER BY user_id
            """)
            users = cursor.fetchall()
        
        text_lines = [
            f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {utc_date_str()}",
            f"–í—Å–µ–≥–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "",
            "ID | Username | –ò–º—è | –£—Ä–æ–≤–µ–Ω—å | –£—Ä–æ–∫ | –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ | –°—Ç–∞—Ç—É—Å",
            "-" * 70
        ]
        
        for user in users:
            user_id, username, full_name, level, lesson_idx, start_date, status = user
            username_display = f"@{username}" if username else "‚Äî"
            full_name_display = full_name if full_name else "‚Äî"
            text_lines.append(f"{user_id} | {username_display} | {full_name_display} | {level} | {lesson_idx} | {start_date} | {status}")
        
        text_file = BufferedInputFile(
            "\n".join(text_lines).encode('utf-8'),
            filename=f"users_{utc_date_str()}.txt"
        )
        
        await callback.message.answer_document(
            text_file,
            caption=f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT\nüë• {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        await callback.answer("‚úÖ TXT —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def export_users_csv(callback: CallbackQuery):
    try:
        from models import get_conn
        from aiogram.types import BufferedInputFile
        
        with get_conn() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, level, lesson_index, manual_lessons_today,
                       start_date, last_sent_lesson_at, last_request_at, status 
                FROM users ORDER BY user_id
            """)
            users = cursor.fetchall()
        
        # CSV —Ñ–æ—Ä–º–∞—Ç
        csv_lines = [
            "user_id,level,lesson_index,manual_today,start_date,last_sent,last_request,status"
        ]
        
        for user in users:
            csv_lines.append(",".join([str(field) if field is not None else "" for field in user]))
        
        csv_content = "\n".join(csv_lines)
        csv_file = BufferedInputFile(
            csv_content.encode('utf-8'),
            filename=f"users_export_{utc_date_str()}.csv"
        )
        
        await callback.message.answer_document(
            csv_file,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV\nüë• {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüí° –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel"
        )
        await callback.answer("‚úÖ CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# -------- Main --------

async def main():
    init_db()
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(set_level_callback_handler, F.data.startswith("set_level:"))
    
    dp.message.register(cmd_progress, Command("progress"))
    dp.message.register(cmd_backup_db, Command("backup"))
    dp.message.register(cmd_admin, Command("admin"))
    dp.callback_query.register(admin_callback_handler, F.data.startswith(("stats_", "download_", "export_")))
    
    dp.message.register(next_lesson_handler, F.text == "üìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
    dp.message.register(repeat_all_handler, F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ")
    dp.message.register(cmd_progress, F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    dp.message.register(restart_from_first_handler, F.text == "üèÅ –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞")
    dp.message.register(fallback)

    bot = Bot(
        BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )

    # –≤–º–µ—Å—Ç–æ CronTrigger –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º IntervalTrigger
    scheduler = AsyncIOScheduler(timezone="Europe/Berlin")
    scheduler.add_job(
        broadcast,
        CronTrigger(hour=8, minute=0)
    )

    scheduler.start()
    logger.info("Scheduler started for daily lessons at 08:00 Europe/Berlin")

    logger.info("Bot started (polling)...")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")